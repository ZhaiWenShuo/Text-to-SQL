
#!/usr/bin/env python
# -*- encoding: utf-8 -*-
'''
@ file        : conclusion_sub_2.0.py
@ description : 
@ time        : 2024/03/12 17:23:01
@ author      : Wenshuo Zhai
@ version     : 1.0
'''


from gptdemo import OpenAI
import pandas as pd
import json
import re
import sqlite3

def ExecutionAccuracy(answer, answer_gpt):
    if ((answer == None) & (answer_gpt != None)) or ((answer != None) & (answer_gpt == None)):
        return 0
    elif (answer == None) & (answer_gpt == None):
        return 0
    elif (answer != None) & (answer_gpt != None):
        d = [False for c in answer if c not in answer_gpt]
        if d :
            return 0
        else:
            return 1
        
def issame(database_id, sql_original, sql_gpt):
    sql_original = sql_original.replace("! =", "!=")
    sql_original = sql_original.replace("> =", ">=")
    sql_original = sql_original.replace("< =", "<=")
    sql_gpt = sql_gpt.replace("\n", " ")
    sql_gpt = sql_gpt.replace("sql", " ")
    sql_gpt = sql_gpt.replace("##", " ")
    sql_gpt = sql_gpt.replace("```", " ")
    sql_gpt = re.sub(r'\s+', ' ', sql_gpt)
    database_path = 'C:/programming/cosql_dataset/database/' + database_id + '/' + database_id + '.sqlite'
    conn = sqlite3.connect(database_path) 
    cur = conn.cursor()
    sql_original_correct = 1
    sql_gpt_correct = 1
    try: 
        answer = cur.execute(sql_original).fetchone()
    except Exception as e:
        answer = "Query error. The error prompt is " + str(e)
        sql_original_correct = 0
    try: 
        answer_gpt = cur.execute(sql_gpt).fetchone()
    except Exception as e_gpt: 
        answer_gpt = "Query error. The error prompt is " + str(e_gpt)
        sql_gpt_correct = 0
    cur.close()
    conn.close()
    same = 0
    if (sql_original_correct & sql_gpt_correct):
        same = ExecutionAccuracy(answer, answer_gpt)

    return sql_original, sql_gpt, sql_original_correct, sql_gpt_correct, same, answer, answer_gpt

model_name = "gpt-3.5-turbo-0125"
# API KEY
client = OpenAI(api_key = '')
f = open('C:/programming/cosql_dataset/sql_state_tracking/cosql_train_GPT3.5-Turbo_conclusion2.0_2140.json', 'r')
data = json.load(f)
for i in range(2139,len(data)):
    set = data[i]
    database_id = set['database_id']   
    interaction = set['interaction']
    database_schema_path = 'C:/programming/cosql_dataset/database/' + database_id + '/' + 'schema.txt'
    file_database_schema = open(database_schema_path, 'r')
    database_schema = file_database_schema.read()
    file_database_schema.close()
    head = "### Given the following database schema. Your job is to analyze the cause of the error in the query generated by GPT and get some guidance based on the error to avoid similar errors next time. The guidance given should be based on the error example and concisely described.\n" + database_schema
    # The error is most likely caused by selecting the wrong column or table or entity. Sometimes one or a few columns may be missing. Sometimes the name of an entity may be written in lowercase instead of uppercase. So 
    conversation = [{"role": "system","content": head}]
    error = 0
    for j in range(len(interaction)):
        utterance = interaction[j]
        utterance_text = utterance["utterance"]
        utterance_sql = utterance['query']
        utterance_sql_gpt = utterance['query_GPT3.5-turbo_simple']
        sql_original, sql_gpt, sql_original_correct, sql_gpt_correct, same, answer, answer_gpt = issame(database_id, utterance_sql, utterance_sql_gpt)
        input = "## The standard query is ' " + sql_original + " '. " + "# The value obtained from the query is " + str(answer) + ".\n" + "## The query generated by GPT is '" + sql_gpt + "'. " + "# The value obtained by the query is " + str(answer_gpt) + ".\n"
        if(sql_original_correct & sql_gpt_correct & (not same)): 
            error = 1
            conversation.append({"role": "user", "content": input})             
            conversation.append({"role":"assistant","content":"## The results obtained by standard queries are different from the queries generated by GPT. Therefore the query generated by GPT is wrong."}) 
            completion = client.chat.completions.create(
                                model = model_name,
                                messages = conversation,
                                temperature=0.0)
            conclusion =  "### The question is '" + utterance_text + "'\n" + input + "### " + completion.choices[0].message.content
            utterance['description'] = "### The question is '" + utterance_text + "'\n" + input
            utterance['conclusion2.0'] = conclusion
            utterance['error'] = 1
        else:
            error = 0
            utterance['error'] = 0
            conversation.append({"role": "user", "content": input})
            conversation.append({"role":"assistant","content":"## No problem."})     
    if(i % 20 == 0):
        new_file_path = 'C:/programming/cosql_dataset/sql_state_tracking/cosql_train_GPT3.5-Turbo_conclusion2.0_' + str(i) + '.json' 
        with open(new_file_path, 'w', errors = 'ignore') as f:
            json.dump(data, f, indent=4, ensure_ascii=False, sort_keys=True)
new_file_path = 'C:/programming/cosql_dataset/sql_state_tracking/cosql_train_GPT3.5-Turbo_conclusion2.0.json' 
with open(new_file_path, 'w') as f:
    json.dump(data, f, indent=4, ensure_ascii=False, sort_keys=True)